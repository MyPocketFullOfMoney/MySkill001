import copy
""""
对象：被分配的一块内存，存储其所代表的值。
不可变类型：一旦创建就不可修改的对象。字符串、数字、元组。
可变类型：可以修改的对象。列表、字典、集合。
浅拷贝：创建新对象，其内容是原对象的引用。无论数据结果多么复杂，浅拷贝只会复制一层。所以当原对象存在复杂的数据结构时，浅拷贝之后子元素为原本元素的引用。
deepcopy：深拷贝是完全复制原变量相关的所有数据，在内存中生成一套完全一样的内容，我们对这两个变量任意一个进行修改都不会影响其他变量。
对于不可变类型，浅拷贝和深拷贝一样。
赋值操作是原对象的引用，赋值后变量都指向同一个对象。
浅拷贝之后，变量是一个独立对象，但它们的子对象还是指向同一对象。
深拷贝，两者完全独立，使用不同的内存空间。

不可变对象类型，没有被拷贝的说法，即便是用深拷贝，查看id的话也是一样的，如果对其重新赋值，也只是新创建一个对象，替换掉旧的而已。

一句话就是，不可变类型，不管是深拷贝还是浅拷贝，地址值和拷贝后的值都是一样的。
"""

# 对于不可变类型，浅拷贝与赋值都是指向同一对象
a = [10,[1,2]]
b = a
copyc = copy.copy(a)
print('a的内存地址：',id(a),id(a[0]),id(a[1]))
print('b的内存地址：',id(b),id(b[0]),id(b[1]))
print('copyc的内存地址',id(copyc),id(copyc[0]),id(copyc[1]))

# 对不可变类型，进行深拷贝
deepcopyc = copy.deepcopy(a) 
print('deepcopyc的内存地址',id(deepcopyc),id(deepcopyc[0]),id(deepcopyc[1]))

# 对浅拷贝对象进行修改，会影响原对象
a[0] = 66 # 深浅拷贝对不可变对象无影响
a[1][0] = 100 # 可变类型对象，浅拷贝只复制了原对象的引用，对可变类型修改，会影响浅拷贝的值
copyc[1][0] = 200 # 深拷贝，完全独立的两个变量。不会相互之间影响。
print(a) # [66, [200, 2]]
print(copyc) # [10, [200, 2]]
print(deepcopyc) # [10, [1, 2]]